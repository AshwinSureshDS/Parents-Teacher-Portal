from flask import Flask, render_template, request, redirect, url_for, g, session
import sqlite3

app = Flask(__name__)

# Secret key for session management (optional for security)
app.secret_key = 'your_secret_key'

def get_db():
  if 'db' not in g:
    g.db = sqlite3.connect('users.db')
  return g.db

@app.teardown_appcontext
def close_db(error):
  if 'db' not in g:
    return
  db = g.pop('db')
  db.close()

@app.route('/', methods=['GET', 'POST'])  # Allow both GET and POST requests
def login():
    db = get_db()
    error = None
    if request.method == 'POST':
        roll_no = request.form['roll_no']
        password = request.form['password']
        user_type = 'Teacher' if request.form.get('toggle') else 'Parent'

        # Validate user input (optional)
        if not roll_no or not password:
            error = 'Username and password are required.'

        # Check user credentials in database
        cursor = db.cursor()
        cursor.execute("SELECT * FROM users WHERE roll_no = ? AND password = ? AND user_type = ?", (roll_no, password, user_type))
        user = cursor.fetchone()

        if user is None:
            error = 'Invalid credentials. Please try again.'
        else:
            # Login successful, set user details in session
            session['user_id'] = user[1]  # Assuming roll_no is at index 1
            session['user_type'] = user[4]  # Assuming user_type is at index 4
            return redirect(url_for('login_success'))  # Redirect to success page

    return render_template('login.html', error=error)

@app.route('/login_success')
def login_success():
  return redirect(url_for('home')) #return "<h1></h1>"  # You can customize this success page

@app.route('/signup', methods=['GET', 'POST'])
def signup():
    db = get_db()
    c = db.cursor()
    error = None

    if request.method == 'POST':
        username = request.form['name']
        roll_no = request.form['roll_no']
        email = request.form['email']
        password = request.form['password']
        confirm_password = request.form['confirm_password']
        user_type = 'Teacher' if request.form.get('toggle') else 'Parent'

        # Validation checks (add more as needed)
        if not username:
            error = 'Username is required'
        elif not roll_no:
            error = 'Roll Number is required'
        elif not password or not confirm_password:
            error = 'Password and confirm password are required'
        elif password != confirm_password:
            error = 'Passwords don\'t match'
        else:
            # Check if email already exists (optional)
            c.execute("SELECT * FROM users WHERE email = ?", (email,))
            if c.fetchone() is not None:
                error = 'Email address already exists'

        if error is None:
            # Insert user data if validation passes
            c.execute("INSERT INTO users VALUES (?, ?, ?, ?, ?)", (username, roll_no, email, password, user_type))
            db.commit()
            return redirect(url_for('login_success'))  # Redirect to success page

    return render_template('sign_up.html', error=error)

def get_current_user():
    if 'user_id' in session:
        db = get_db()
        cursor = db.cursor()
        cursor.execute("SELECT * FROM users WHERE roll_no = ?", (session['user_id'],))
        user = cursor.fetchone()
        return user
    return None

@app.route('/home')
def home():
    current_user = get_current_user()
    if not current_user:
        return redirect(url_for('login'))
    return render_template('home_page.html', current_user=current_user)

if __name__ == '__main__':
  app.run(debug=True)